# Magick IRC Services
# (c) 1997-2003 Preston A. Elder <prez@magick.tm>
# (c) 1998-2003 William King <ungod@magick.tm>
#
# IRCD Protocol Definition File

## -------------------------------------------------------------

# All lines starting with the '#' (hash) are considered comments.
# All text after a ';' (semi-colon) character on a line is also
# considered a comment (unless preceeded by a '\' (backslash)
# character, when it is taken as literal).
# All values (ie. text after the = (equals) sign) are trimmed of
# spaces (and tabs) before and after it.  Using '\ ' (backslash
# space) will preserve spaces from the text to that point (ie.
# if before the text, from the '\ ' to the text, if after, from
# the end of the text to the '\ ').
# A '\' (backslash) at the end of a line will continue to the
# next line and treated as one line, however lines that are blank
# or only contain a comment will be skipped.
# All section names and keys (the text to the left of the
# equals sign) are CASE SENSITIVE, do NOT change the case.

## -------------------------------------------------------------

[Protocol]

# Maximum length of any nickname
NICKLEN         = 32

# The maximum amount of characters that may be used for the 'body'
# of any message going across the network (ie. excluding all the
# 'header' information such as source nickname, destination,
# message type, etc).  The absolute maximum is normally about 512
# bytes, so the default value (450) makes a 62 byte allowance for
# header information.
MAXLINE         = 450

# Whether the GLOBOPS, HELPOPS and CHATOPS commands are valid.
GLOBOPS         = TRUE
HELPOPS         = FALSE
CHATOPS         = TRUE

# This can be set to true to force Magick to use tokens, however
# it should normally be left set to FALSE, as we will detect whether
# tokens are used by looking at the incoming PROTOCTL line.
TOKENS          = FALSE

# Version of TSora we support
TSORA           = 7

# The TOPIC command should include who set the topic, and the time
# it was set (as opposed to assuming the source is the setter).
BIGTOPIC        = TRUE

# Services must join to be able to set a topic.
TOPICJOIN       = FALSE

# Services should send the current time when setting the topic.
# (meaningless when BIGTOPIC is false).
TOPICCURRENT    = FALSE

# Services cannot set channel modes (unless op'd in channel), so
# the server itself must set them.
SERVERMODES     = FALSE

# Does the ISON command work from remote clients.
ISON		= FALSE

# Join Types
#
# 0000 = :source JOIN :#channel,#channel,...
#
# 1000 = :source SJOIN timestamp #channel
#
# 2000 = :server SJOIN timestamp #channel mode [args] :users..
JOIN            = 0000

# Akill Types
#
# 0000 = KILL user :reason
#
# 1000 = AKILL host user :reason
#        RAKILL host user
# 1001 = AKILL host user time killer now :reason
#        RAKILL host user
# 1002 = TKL + G user host killer expiry set :reason
#        TKL - G user host killer
#
# 2000 = GLINE * +time user@host :reason
#        UNGLINE * user@host
# 2001 = GLINE * +user@host time :reason
#        GLINE * -user@host
# 2002 = GLINE +user@host time :reason
#        GLINE -user@host
#
# 3000 = GLINE oper operuser operhost operserver user host :reason
#            (above repeated 3 times, for 3 different opers/servers)
#        NO UNGLINE
# 3001 = KLINE killer * time user host :reason
#        NO UNKLINE
AKILL           = 1001

# Send KILL message for each user matching AKILL after AKILL message
KILLAFTERAKILL  = TRUE

# Signon Types
#
# 0000 = USER nick user host server :realname
# 0001 = USER nick signon-time user host server :realname
#
# 1000 = NICK nick hops signon-time user host server :realname
# 1001 = NICK nick hops signon-time user host server service :realname
# 1002 = NICK nick hops signon-time user host server service althost :realname
# 1003 - NICK nick hops signon-time user host althost server service :realname
# 1004 - NICK nick hops signon-time user host althost server service ipaddress :realname
#
# 2000 = NICK nick hops signon-time mode user host server :realname
# 2001 = NICK nick hops signon-time mode user host server service :realname
# 2002 = NICK nick hops signon-time mode user host althost server helper :realname
# 2003 = NICK nick hops signon-time user host server service mode althost :realname
# 2004 = NICK nick hops signon-time mode user host server service ipaddress :realname
# 2005 = NICK nick hops signon-time mode user host althost server service ipaddress :realname
#
# 3000 series gets its server from the SOURCE ... not part of the message
# NOTE: 3000 makes the mode OPTIONAL ... damn ircu ...
# 3000 = NICK nick hops signon-time user host [mode] ipaddress nicknumeric :realname
#
# 4000 = CLIENT nick hops signon-time mode user host server nickid :realname
# 4001 = CLIENT nick hops signon-time mode user host fakehost lang !serverid(%|:)ipaddress serviceid :realname
SIGNON          = 2005

# Amount of paramaters allowed on a channel mode line.
MODES           = 6

# Modes that all services should set on themselves on signon
SERVICESMODES   = 

# Channel modes that are allowed to have arguments
CHANMODEARG     = ovaubeklI

# The mode that indicates a user is a founder of the current channel
FOUNDERMODE     = u

# The server line that will be sent on connection
# There are 6 replacement values:
# $1 = Server name              $2 = hop count
# $3 = Server description       $4 = Server numeric
# $5 = Current time (time_t)    $6 = Services start time (time_t)
SERVER          = SERVER $1 $2 :$3

# The string to send to signify start and end of burst
BURST           = BURST
ENDBURST        = BURST 0

# The string we will send to indicate what protocol options we
# support.  Known values are:
#
# For PROTOCTL:
# NOQUIT      Do not quit each user on SQUIT (assume it)
# TOKEN       Use one-char tokens instead of PRIVMSG, etc
# TOKEN1      Different set of tokens supported.
# WATCH=128   Allow the WATCH command (for signon/off notification)
# SAFELIST    Currently does nothing.
# TS3         Timestamp everything (aka. TSora)
# SSJOIN      Use SJOIN for joins, includes: @ (op) + (voice)
# SJOIN       Same as SSJOIN, includes: % (halfop) * (owner) ~ (prot)
# SJOIN2      Same as SJOIN, but <none> is now <->
# SJ3         Same as SJOIN2, includes: & (ban) " (except)
# BURST       Allow the BURST keyword (to indicate sync)
# UNCONNECT   Support UNCONNECT (at the moment, does nothing)
# NICKIP      Send (and receive) the nick's IP address.
# NICKv2      Add UMODE & v.host (if supported) to nick signon
# UMODE2      Allow the UMODE2 command (aka. :user MODE user mode)
# NS          Allow use of server numerics (not just server name)
# VHP         Enable virtual host support
# VL          v:line support (protocol based deny info)
# SJB64       Support 64-bit timestamps  (*)
# DT1         Uses DarkstatTimeMr14C Protocol
# SERVICE     We are capable of signing on services.
# EX-REX      Allow the EXCLUDE/REXCLUDE commands.
# IDENTITY    Use base64 identities for servers/nicks.
# HIDENAME    Should our server name be hidden on the net.
# TMODE       Accept modes with timestamp.
# TRIRCD5     Get hide/uline/hub info in remote SERVER lines.
#
# For CAPAB:
# QS          Quit Storm (ie. assume quit's on SQUIT)
# EX          Channel mode +/-e (ban exception)
# CHW         Allow '@' or '+' before #channel in notice/privmsg
# DE          Channel mode +/-d (deny, ie. regex ban)  (*)
# LL          Lazy Links (real-time sending of channel info)
# IE          Channel mode +/-I (invite exceptions)
# EOB         Send the EOB message
# KLN         Support the KLINE network ban method
# GLN         Support the GLINE network ban method
# KNOCK       Accept KNOCK messages (user attempting to join)
# HOPS        Channel mode +/-h (halfops)
# HUB         Link is a hub server
# AOPS        Channel mode +/-a (anonymous ops)
# UID         Send messages by UID, not by name  (*)
# ZIP         Compress stream to irc server using zlib  (*)
# DKEY        Encrypt stream to irc server  (*)
# TBURST      Use TBURST for topic changes  (*)
# PARA        Receive invite messages for all channels with +pi
#
# Note: (*) denotes an option we DO NOT support right now.
PROTOCTL        = CAPAB NOQUIT TS3 SSJOIN BURST UNCONNECT NICKIP DT1 SERVICE EX-REX

# The strings for changing a user's nickname (SVSNICK), setting
# a mode on a channel or nickname (SVSMODE), killing a user
# without it looking like a kill (SVSKILL), stopping all operators
# on a particular server from being recognized as operators (SVSNOOP),
# Q-Lining (denying usage of) and un-Q-Lining of a nickname (SQLINE
# and UNSQLINE respectively), and changing the displayed host of a
# nickname (SVSHOST).
# If any of these are set to blank, the feature is disabled.
SVSNICK         = SVSNICK
SVSMODE         = SVSMODE
SVSKILL         = SVSKILL
SVSNOOP         = SVSNOOP
SQLINE          = SQLINE
UNSQLINE        = UNSQLINE
SVSHOST         = 

[Numeric]
# Use 'trim' numerics (ie. remove 0-padding).
TRIM            = FALSE

# Sent (and receive) a decimal number for the server numeric in the
# SERVER line (at all other times, use the base64 encoded one).
SERVERNUMBER    = FALSE

# Combine the nick and server numerics when sending or receiving a
# message where the source is a nickname.
COMBINE         = FALSE

# All messages are prefixed with the server (or nick) numeric.
PREFIX          = FALSE

# The server numeric should be obtained from the first field in
# the description of a SERVER line for our immediate peer (this
# was introduced by Unreal, thus the name).
UNREALNUMERIC   = FALSE

# For SERVER, USER and CHANNEL, this is the maximum length of the
# numeric we will receive or send.  Setting this to 0 will disable
# that specific kind of numeric.  For FIELD, this is the field of
# the SERVER line that we will expect to contain the numeric.
SERVER          = 0
FIELD           = 0
USER            = 0
CHANNEL         = 0

# This is a list of characters that are used to do the base64
# encoding.  ORDER IS IMPORTANT.  The first character will be
# equivalent to the number 0, the second to 1, and so on.
BASE64          = 

# This entire section is used to list all tokens that are understood
# by this IRCD, and what the fully expanded equivalent is.
[Tokens]
