RCS-ID:      $Id$

Design Document.
================

This document is basically sort of a to-do from a design
perspective.  This should outline how things are to fit
together design-wise, by listing features that should be
included, and how they fit together and interact.  This
can be from small cosmetics to major implementations.
A left-hand column has also been added to check off when
things are done.  This is seperate from the suggestions
(which is a list of requested or proposed features), or
the TODO file (which is a brief list without much detial).

* To be done
+ Being done
x Done
- Totally Unfeasable
| Not required
> Comment on design


+ Tracing (internal debugging) to be added.  Includes tracing of marked
	debug checkpoints, showing various veriables (eg. all data elements
	of a user/channel entry), or even down to logging the entrance into
	and exit out of any function.  This should be able to be 'turned up'
	or 'turned down/off' via. operserv.
		FuncTrace T("funcname", ...)
	Has auto-indenting, with Thread ID's (0 for no thread), each thread
	goes into a different file.  New spawned threads is a marker.
	> All done bar appropriate CP(()) and COM(()) tracing.
	> Still need to implement some trace levels.

* Services linking ability.  Keeping the services levels however.  Basically
	if one set of services gets too lagged (defined in a shared-config),
	or goes down: If another set of services of the same level is currently
	on the network, then it takes over as 'master'.  When the first comes
	back up, it stays as master, and the other one becomes a backup (which
	one of the same level takes over is determined by the lag to the network
	at the time the master goes down).  If none of the same level is on the
	network, one of a higher level takes over, but hands back control to one
	of a lower level as soon as it comes back and has reasonable lag again.
	The failover (handover to another set of services) can be done manually.
		A (1)	B (1)	C (2)	* = Master, - = Backup, x = Down
		*	-	-	Normal
		x	*	-	A goes down (fail to equivilant)
		x	x	*	B goes down (fail to higher level)
		x	*	-	B comes back up (fail to lower level)
		-	*	-	A comes back up (no change)
	There will need to be 'lag' thresholds in place to make it fail directly
	to C if A is down, and B is too lagged to be of any use (ie. LAGTHRESH
	might be 30s lag, if its above that, its taken out of the available fail-
	to list -- unless it has the least lag of the ones in the fail-to list
	or is the only one left).  We will also need to accomodate for losing
	connection to the services network.

* Services interlink.  EVERY set of services thats sharing data links with
	every other set of services on the network.  When a message needs to
	be transferred, its sent out ALL links with a unique message ID.  They
	then in turn send it on to the other servers.  Eventually, the message
	will get to every server via. the quickest means.  It will ignore
	message ID's its already seen.  We will have over 3,000,000,000 message
	ID's to work with (all being 10 digits long), so we should be able to
	time out old ones (remove from map of 'seen' messages) easily.
	TODO:  Work out way to stop infinate recursion -- eg. transmit a
	'path' with the message ID, so it wont send to servers in the path.
	(probably 'if I've seen this, dont pass it on' method)
	> This will be done with CORBA (TAO).

* Redo the locking with some macros to setup/emulate  a try..finally type
	scenario on gcc, msvc and bcb . Note Function macros only, so that we don't get
	that damn triplet argument fubar again.

* work out what functions/classes to surface to the scripting language
	and their function definitions. note varargs style functions
	can be supported easily.

* do some sample scripts (eg. VoteServ)

* work out exactly how we are going to handle data storage of 'new'
	scripted classes (for existing classes like nickserv, we can
	just make use of the UserDef maps and store it all as strings).

* Add a telnet and DCC interface to magick, which allows certain commands
	to be done (eg. trace, getpass, and various spy functions).  This
	should require a username/password, and allow certain commands
	based on what committee the user is on.  Also should allow some
	bound (scripted) commands to be surfaced here.

* Magick II GUI, which has a configuration editor in it, but also has
	a 'window' which is essentially a telnet session to magick, and
	also will do a tail -f of the log.  Also would be nice to be
	able to open up a help file via. this interface, and have a GUI
	LNG / LFO / HLP editor (nicely laid out in a tree format).
	This client should work on both windows and x-windows, and all
	traffic to/from the magick server should be ENCRYPTED if the
	server has encryption on (which means the user has to generate
	their own keyfile).  Also like telnet requires a login.
