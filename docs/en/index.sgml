<!doctype linuxdoc system>
<article>
<title>The Magick Handbook
<author>Magick Development Team <tt>devel@magick.tm</tt>
<date>Version 2.0, Mon Jan  1 13:15:02 EST 2001
<abstract>
This Handbook describes Magick Version 2.0
</abstract>

<toc>

<sect>Introduction
<p>

Magick IRC Services are a program that is designed to interface
with an Internet Relay Chat (IRC) network, and offer its users,
operators and administrators services such as the ability to
register nicknames so they cannot be taken by anyone else, the
ability to register channels with pre-defined access lists and
kick lists so that channels may not be taken over, the ability
to leave offline messages for other users, and many network
control mechanisms to stop things like flooding, abusive users,
and many other things.

Magick services adhere to RFC 1459, and many variants of it.
The changes to the base protocol will not be discussed in this
document, as there are too many of them, and so many different
distinct protocols around nowadays, however Magick has been
designed to cope with them all, with a minimum of fuss (as long
as they support services of this nature).

The Magick home page can be found at:
    <htmlurl url="http://www.magick.tm">

Magick is freely downloadable from:
    <htmlurl url="ftp://ftp.magick.tm/pub/magick.tm/Magick-II">

The Magick public mailing list is <htmlurl url="mailto:general@magick.tm" name="general@magick.tm">.
Yoy may subscribe to this mailing list at:
    <htmlurl url="http://lists.sourceforge.net/lists/listinfo/magick-general">


<sect1>Dedication
<p>

Magick is dedicated to the memory of PreZ's loving sister,
Stacey Louise Elder (1st Jan, 1975 - 25th Feb, 1998). She
has been there for me more than anyone over the years, and I
was distraught when she died, may her Lord love her as much
as I did, and keep her safe like I could not. Merry Parting,
Dear Sister.

Magick is also dedicated to the memory of Ungod's brother,
Edward Kevin King (28th Aug, 1982 - 21st Nov, 1997), His
life was short, but his memory is great, never will those
who knew him forget him.

<sect1>Authors
<p>

Magick is designed and developed by the Magick Development
Team <htmlurl url="mailto:devel@magick.tm" name="devel@magick.tm">.  Any bugs, feature requests,
comments, etc should be directed at this mailing list.  The
development team is an OPEN team, however certain skills
are required to join, not the least of which is the ability
to program in C and C++, and to use CVS.  To join this team,
please e-mail <htmlurl url="mailto:prez@magick.tm" name="prez@magick.tm"> for further details.

The Magick Alpha Team <htmlurl url="mailto:alpha@magick.tm" name="alpha@magick.tm"> test current
development versions of Magick, finding not only bugs, but
also making sure it is a user friendly and understandable
product, so it may be changed at the same time its being
designed if needs be (rather than going back and re-writing
it).  The alpha team is an OPEN testing team, and you may
join it by first downloading and installing/setting up the
current alpha version of Magick (if you cannot do this on
your own, its recommended you do not join the alpha team),
and then subscribing to the alpha mailing list at:
<htmlurl url="http://lists.sourceforge.net/lists/listinfo/magick-alpha">

The Magick Beta Team <htmlurl url="mailto:beta@magick.tm" name="beta@magick.tm"> test versions
of magick that have been through alpha testing, and are in
the final phase of development.  The beta team's main goal
is to find bugs before Magick is released, so they do not
get out into the release version of Magick.  The beta team
is an OPEN testing team, and you may join it by first down-
loading and installing/setting up the current beta version
of Magick, and subscribing to the beta mailing list at:
<htmlurl url="http://lists.sourceforge.net/lists/listinfo/magick-beta">

The following people have contributed to the final product
of Magick II (testers not included):

<descrip>
<tag/Programmers/
<itemize>
<item><htmlurl url="mailto:prez@magick.tm" name="Preston Elder">
<item><htmlurl url="mailto:ungod@magick.tm" name="William King">
</itemize>

<tag/Designers (some coding)/
<itemize>
<item><htmlurl url="mailto:striker@magick.tm" name="Patrick Prins">
</itemize>

<tag/Supporters/
<itemize>
<item>Marieke Bermon
<item>Kelly Hill
<item>Emma Ellison
<item>Todd Wright
<item>Matt Heckaman
</itemize>

<tag/Supporters Who Don't Know It/
<itemize>
<item>Coca-Cola Amatil	- Life Support *bleep ... bleep*
<item>Nescafe Blend 43	- See above (any kind of caffeine!)
<item>Tschaicovski	- If you don't understand, you never will...
</itemize>
</descrip>

<sect1>Changes
<p>

<sect2> Magick II
<p>

Total re-write in C++, so version .0 is merely a 'new feature' list.

<itemize>
<item>2000/??/?? .0
		<itemize>
		<item>Fully multi-threaded (can do >1 thing at once)
		<item>Database saves in XML and supports compression and
		    encryption. Is also no longer endian specific.
		<item>Works on most *NIX and all Win32 platforms.
		<item>Fully multi-lingual (log files, help, etc).
		<item>Supports DCC file transfers and a filesystem (memo
		    attachments, nickserv pictures or public FS).
		<item>Times saved in GMT, so timezone inspecific.
		<item>Committee-based, can also add new committees.
		<item>Can now lock any SET option (except text fields).
		<item>Supports HTM (High Traffic Mode).
		<item>Supports ALOT more IRC protocols (and alot of their
		    more specialised features) and can switch
		    irc protocols without need to recompile.
		<item>Can now set time limits on akills.
		<item>Supports IRC Operator Deny (ensures mask cant oper).
		<item>Services ignore now ignores by mask, not nickname.
		<item>Supports TRACING, for on-line debugging.
		<item>Has SQUIT protection (to save on IDENT's).
		<item>Many new ChanServ features like Kick On Ban, timed
		    ban removal, channel greetings, on-join messages.
		<item>Nicknames & Channels now have a NoExpire flag.
		<item>Time delay on memo sending to allow continuance or
		    cancellation of memos, or DCC of file attachments.
		<item>'Read' and 'Unread' status on memos / news articles.
		<item>Supports multiple connection entries (aka. C/N's).
		<item>Can bind to a single IP address.
		<item>Supports multiple nicknames for same service.
		<item>Limits placed on time between registrations and amount
		    of channels a user may own.
		<item>Clone prot will auto-akill for too many triggers.
		<item>Added the ability to output logfile to a channel.
		<item>Expanded ON/OFF command to allow turning off of one
		    service only, just log files or the events engine.
		<item>Added Secure Server listing ability (ie. if we dont
		    have a listing for the server, squit it!).
		<item>MANY, MANY, MANY more enhancements.
		</itemize>
</itemize>

<sect2> Magick I
<p>

Renamed to this to avoid conflicting version numbers, etc and finally
rid myself of all the excess EsperNet baggage.

<itemize>
<item>1999/02/20 .4
		<itemize>
		<item>Added copyrights back from EsperNet, so they would stop
		    bitching at me for removing them (even though I DID
		    modify the code to an extent they no longer resemble
		    their services).  *shrug* some people.
		<item>Added configuration file (see DOC dir) (Ungod)
		<item>Added messages.h to customise Magick output.
		<item>Added SYNC_TIME (dbase save) showing option
		<item>Made MODE strings (User, Channel, ChanInfo) DYNAMIC
		<item>Fixed AutoUpdate on databases
		<item>Fixed fuckloads more bugs (as usual).
		<item>Added killing for repeated password failures.
		<item>Added LIVE (non-fork) mode (CTRL-C forks).
		<item>Added MS REPLY, NS ACCESS CURRENT and NS SLAVES functions.
		</itemize>
<item>1998/01/20 .3
		<itemize>
		<item>Added MLOCK +i and +k support (ChanServ will keep channel if
		    no one in it!).
		<item>doc/Distribution -- READ it (and all files in that DIR!) :)
		<item>Removed time_zone and added the "X time ago" formats
		<item>Fixed lots and lots of bugs, and optimised alot of code!
		<item>Replaced IRCOP_OVERRIDE with OVERRIDE_LEVEL (6 levels)
		<item>Added TimeZone support for backup services (fixes timings)
		<item>Added auto -v and -o for non-access'd people off split
		<item>Added Nick Linking (BIG MF of an addition)
		<item>Replaced old IGNORE with Flood Protect (smarter system!)
		<item>Theres lots more little additions, but too many to document.
		</itemize>
<item>1997/12/30 .2
		<itemize>
		<item>Added new revenge level (REVERSE, now NONE will do NOTHING).
		<item>Fixed a few minor bugs (with unsuspension, breakdown
		    percentages, and handling nick collides, etc).
		<item>Moved Services OP list to a access list-style format.
		<item>Removed the SUPER_PASSWORD - now only the SERVICES_ADMINS
		    (hardcoded in config.h) can do that :)
		<item>Added removing by number to ALL lists now :)
		<item>Added OperServ MASKLIST (like USERLIST but accepts user@host).
		<item>Removed the magick.msg and magick.omsg in favour of the new
		    OperServ LOGONMSG and OPERMSG commands :)
		<item>Wrote both user and oper documentation for ALL commands!
		</itemize>
<item>1997/12/15 .1
		<itemize>
		<item>Optimized code and implemented hash tables (if you dont know,
		    dont worry - just take it as a good thing!).
		<item>Added some of Andy Church's services routines (overflow stuff,
		    some socket stuff, and the configure script mainly).
		<item>Removed upaccess - people should have used it, or not need it.
		<item>Added MemoServ OPERSEND.
		<item>Fixed user/oper counting when SQUIT.
		<item>Fixed ghost command and Channel/Nick expiry bugs.
		<item>Added Users on Servers breakdown (OperServ)
		<item>OFF/ON commands now close/open logs aswell.
		</itemize>
<item>1997/12/08 .0
		<itemize>
		<item>Forgot the new services.h for Services 3.0.9, included here.
		<item>Veriable ChanServ levels implemented (finally).
		<item>Added deletion of user from access lists, and all
		    a user's channels when a user is deleted.
		<item>Moved names for services to config.h
		<item>Magick know more about their own actions (dont laugh!)
		<item>IrcOP's dont trigger clone protection (are ignored).
		<item>Added ability to use PRIVMSG instead of NOTICE.
		<item>Added ChanServ JOIN ability (some like it - I dont).
		<item>Added ChanServ REVENGE module, for protecting userlist.
		<item>AKILL and CLONE may now be removed by number.
		</itemize>
</itemize>

<sect2> Services 3.0
<p>

<itemize>
<item>1997/11/30 .9
		<itemize>
		<item>Little maintinance (checked all various compiles, etc).
		<item>Fixed MAJOR bug with list-duplication on re-connect.
		<item>Minor bugfixes and adds (OFF reasons, pidfile fix, etc)
		</itemize>
<item>1997/11/26 .8
		<itemize>
		<item>Changed the way CLONE detection works (MAJORLY!)
		<item>Added "CLONE" for allowing more than "Default max clones"
		<item>Fixed bug that didnt reset "current online" lists.
		<item>Added "is already there" and "kill all matching" to akill
		<item>Added chanserv Auto-Unban for when ppls are banned on a
		    channel by someone equal to or lower than them.
		<item>Capped the chanserv levels (to stop the "10000" bug).
		<item>Fixed the chanserv UNBAN option so it does ALL bans.
		<item>Added 'bounce bans on link' for def_level(2)+ (10 usually).
		</itemize>
<item>1997/11/20 .7
		<itemize>
		<item>Fixed a few bugs (nickserv IDENT, Globals and Mass -v's)
		<item>Removed SKELETON defines - obsolite by Pick 'n' Choose.
		<item>Removed test/ directory - was old, outdated and useless!
		<item>Added (optional) mask restrictions to USERLIST and CHANLIST.
		<item>AKILL mask's must be >7 chars in length (stop *@*.com).
		<item>Added Services Restart/Reconnect - see config.h for details.
		<item>Added Services Leveling to replace READONLY - better way of
		    implementing backup services versions, etc.
		</itemize>
<item>1997/11/10 .6
		<itemize>
		<item>Fixed up the "Pick 'n' Choose" section of config.h so it
		    now actually makes the end result smaller :)
		<item>Added ChanServ and NickServ SUSPEND/UNSUSPEND functions
		<item>AKILL's will now expire after a time specified in config.h
		<item>Added PAKILL - non-expiring AKILLS settable by SOP's
		<item>Channel/Nick memos will get erased with the channel/nick
		<item>Added ON/OFF so u can enable/disable services without QUIT
		<item>ON, OFF, QUIT, SHUTDOWN and RAW are passworded (config.h)
		</itemize>
<item>1997/11/05 .5
		<itemize>
		<item>Implemented DAL4.4.15+ Services Support, Including:
		    <itemize>
		    <item>Killing users without a Killed (IrcOp (reason))
		    <item>Server and Nick quarentining via. OperServ
		    <item>Setting of nick's modes with MODE command.
		    <item>CHANGE nick instead of KILL it on nick protection
		    </itemize>
		<item>SOP's get help for their commands in /msg OperServ HELP
		<item>Memo Forwarding To/From Nick/Channel (in any combo)
		<item>Message to users when they /oper (services.omsg)
		<item>Made use of the till now unused def_access in chanserv.c
		</itemize>
<item>1997/10/30 .4
		<itemize>
		<item>Added support for DAL4.4.15+ servers.
		<item>Moved up all chanserv levels by 5 - 5 is now auto-voice.
		<item>Added /msg operserv listsops (FINALLY!)
		<item>SOPS now need to be /oper'd to be SOPS (oops)
		<item>Oper override of chanserv now #definable (in config.h)
		</itemize>
<item>1997/10/22 .3
		<itemize>
		<item>Fixed a bug in ignore (was stuffing ACCESS list)
		<item>Added OperServ Mode #channel returning current modes
		<item>Opers can override chanserv op/deop/invite/unban
		<item>SOPs can override chanserv clear
		</itemize>
<item>1997/10/21 .2
		<itemize>
		<item>Added READ ALL to MemoServ (channel and nick)
		<item>Added ability for oper to op, deop, invite, unban (ChanServ)
		<item>Added ability for SOP to use clear (ChanServ)
		<item>Added hard-coded /msg HelpServ Credits (so sue me).
		<item>Added memo IGNORE list to nickserv.
		<item>Fixed the nickserv SET IRCOP function
		</itemize>
<item>1997/09/15 .1
		<itemize>
		<item>Only Lvl 20 or sender can delete channel news
		<item>Fixed bug in NickServ that Mis-Saved URL/NICK fields
		</itemize>
<item>1997/09/15 .0
		<itemize>
		<item>Services now respawn if /kill'd
		<item>Message to users when logon added (services.msg)
		<item>Disabled @* (and @*.*, etc) AKILLS except for SOPS
		<item>Disabled @* (and @*.*, etc) AKICKS except for Level 20's
		<item>Created FILE_VERSION 3 (autoconverts from 2)
		<item>Added NickServ URL and EMAIL fields (v3)
		<item>Added ChanServ URL field (v3)
		<item>Added NEWS system (Basically Channel MEMO's)
		<item>Added IRC Operator NickServ flag (no nick expiry)
		<item>Added ChanServ level 20 (can set all but PASS and FOUNDER)
		<item>Added CURRENT TIME to info displays
		</itemize>
</itemize>

<sect2> Pre-Services 3.0
<p>

Originally, Magick was based on Services 2.2.26, by Andrew Church.
As of Magick II, they are no longer based in any way, shape or form
on these services.


<sect>Installation
<p>

<sect1>How to obtain Magick 
<p>

The Magick home page can be found at:
	<htmlurl url="http://www.magick.tm">

Magick is freely downloadable from:
	<htmlurl url="ftp://ftp.magick.tm/pub/Magick">

The Magick public mailing list is <htmlurl url="mailto:magick@magick.tm" name="magick@magick.tm">
To subscribe, email <htmlurl url="mailto:majordomo@magick.tm" name="majordomo@magick.tm"> with `subscribe
magick' (no quotes) in the text of the message.

<sect1>Requirements
<p>

To compile Magick, you will need a GOOD C++ compiler.  Ones that
have been tested and found to work are:
    <itemize>
    <item>gcc 2.95 and above
    <item>Borland C++ Builder 4.0 and above
    </itemize>
Others may work, but have NOT been tested.

Before you begin compilation of Magick, you must have a fully compiled
version of the Adaptive Communications Environment (ACE), the ZLIB
compression library, and a threads library such as pthreads.

If you are missing any of the above, you may obtain them as follows:
	<itemize>
	<item><htmlurl url="http://www.cs.wustl.edu/~schmidt/ACE.html" name="ACE">
	<item><htmlurl url="ftp://ftp.freesoftware.com/pub/infozip/zlib/index.html" name="ZLIB">
	<item><htmlurl url="http://www.gnu.org/pth" name="PTH">
	</itemize>

FreeBSD USERS - FreeBSD has inbuilt its threads library into its
default operating system, and you do not need a separate threads
library, however all versions before 3.4 with the standard libc_r
patch from FreeBSD dated 02-02-2000, or 4.0 will not work, due to
a badly implemented threads library.

You must compile each of the above products before attempting to
build Magick.  Magick will look for them in the configure phase.

Also, if you dont have about 128mb memory (including swap), and 150mb
hard disk space free, I wouldnt bother to compile magick.  Our main
philosophy is to try and get Magick as efficiant at run-time as
possible, to this end, we've had to trade off compile-time resources
and resulting binary size.  What this means in english is, the final
product is very efficient, however making it will take a large
chunk out of your available resources.

Host locking (ie. stopping magick from being run anywhere that
doesnt have the same host and system type compiled into magick)
is impossible with pre-compiled binaries.  If you wish to add
this level of protection in (ie. you want to ensure that even
if someone DOES get your binaries, they cant run them without
going through some special measures to try and do so), then you
will need to re-compile.  Essentially the rule of thumb is
'compile if you can, use pre-compiled binaries if you must'.

<sect1>ACE Installation
<p>

Please note:  If you do not want to compile ACE yourself, or you
are having troubles compiling it, pre-compiled binaries of ACE are
available from ftp://ftp.magick.tm/pub/magick.tm/ace.  It is
recommended you get the 'shared' version first, and 'static' only
if the shared does not work.  If your OS is not listed, please
contact the <htmlurl url="mailto:devel@magick.tm" name="Magick Development Team">.
Above and beyong this help file, we will not help you compile ACE.

I've included this section now because people seem to have troubles
installing the ACE library obtained above.  One special note for
people wanting to install ACE.  Do NOT use the `configure' utility.
This utility is still in its infancy for ACE, and tends not to work.

Instead, you should follow the instructions that are outlined in the
ACE-INSTALL file, which is simply (from the ACE_wrappers directory):

<tscreen><verb>
export ACE_ROOT=$PWD
cd ace
ls config*    (find the one for your system)
ln -s config-your-system.h config.h
cd ..
cd include/makeinclude
ls platform*    (find the one for your system)
ln -s platform_your_system.GNU platform_macros.GNU
cd ../..
make
</verb></tscreen>

<itemize>
<item>Linux Note: All linux systems with kernel versions 2.2.0 and beyond
should use the lxpthread linux configuration.
<item>FreeBSD Note: You should use the pthread version of this library
if you hope to use it with Magick.  Please read FreeBSD note above.
</itemize>

Note on the above.  The `export ACE_ROOT=' command may not work on
your shell.  csh and tcsh users will have to use `set ACE_ROOT=',
and on some other weird shells, just `ACE_ROOT='.  Try them until
you get one that doesn't error.  Once you have one that doesn't have
an error, just type `echo $ACE_ROOT' to ensure it gives you your
current directory, if not, keep trying.  I love unix standards :)

Note, If you get problems in the make with errors like:

ACE_wrappers/include/makeinclude/wrapper_macros.GNU,
       line 135: Missing dependency operator

Your version of make is either old or not GNU standard.  ACE requires
a GNU standard make program to compile.  First see if the program
`gmake' exists, and if so try it, if not, or it doesn't work, please
download it by going to http://www.gnu.org/software/make/make.html
and downloading it from one of their mirror sites.  Incase your
wondering `do I need root for this?'  No, you don't.  Just download
it, compile it, and then type:

alias make=/path/to/make-x.y/make

Where /path/to are replaced with the full path before the make
directory (eg. /home/myuser), and the x and y in the make-x.y
directory are substituted for the version of make you have.  Once
you have aliased make, then try and build ACE again.

After ACE has been made, you have two options:

<itemize>
<item>As root, you can copy *.so in the ace directory to /usr/local/lib
   and then copy *.h, *.i, *.inl and *.cpp in the ace directory to
   /usr/local/include/ace, which you will have to create.  On linux
   systems you will have to type 'ldconfig' after this.  Don't forget
   to make the libs chmod 755, and the includes chmod 644.
<item>When you don't have root, use the --with-acelib and --with-aceinc
   options to Magick's configure script to tell it where ACE is.
   Please note however, you will have to type the following line
   before you will be able to execute Magick:
</itemize>

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/ACE_wrappers/ace

Obviously the /path/to should be replaced with the full path leading
up to the ACE_wrappers directory (eg. /home/myuser).  The same note
above about `export ACE_ROOT=' applies to the above export.

<sect1>Basic Installation
<p>

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  <itemize>
  <item>`cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  <item>Type `make' to compile the package.

  <item>Optionally, type `make check' to run any self-tests that come with
     the package.

  <item>Type `make install' to install the programs and any data files and
     documentation.

  <item>You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.
  </itemize>

<sect1>Compilers and Options
<p>

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

<sect1>Compiling For Multiple Architectures
<p>

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

<sect1>Installation Names
<p>

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

<sect1>Optional Features
<p>

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognises.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

<sect1>Specifying the System Type
<p>

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

<sect1>Sharing Defaults
<p>

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

<sect1>Operation Controls
<p>

   `configure' recognises the following options to control how it
operates.

<descrip>
<tag/--cache-file=FILE/
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

<tag/--help/
     Print a summary of the options to `configure', and exit.

<tag/--quiet
--silent
-q/
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

<tag/--srcdir=DIR/
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

<tag/--version/
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

<tag/--with-acelib=file
--with-aceinc=path/
     This specifies where the makefile should look for the ACE library
file, and its includes respectively.  You must specify full pathnames.
Verification on what you have entered is minimal (ie. will only verify
the existence of the library file, and OS.h in the include directory).
This should only be used if Magick does not detect the ACE library.

<tag/--with-zlib=file
--with-zinc=path/
     This specifies where the makefile should look for the ZLIB library
file, and its includes respectively.  You must specify full pathnames.
Verification on what you have entered is minimal (ie. will only verify
the existence of the library file, and zlib.h in the include directory).
This should only be used if Magick does not detect the ZLIB library.

<tag/--enable-bsdthreads/
     This is mutually exclusive of --with-threadlib and --with-threadinc,
it specifies to use the -pthreads option with GCC or CC when linking the
magick binary.  This is used for systems where pthreads is ingrained in
the standard C library, specifically, BSD.

<tag/--with-threadlib=file
--with-threadinc=path/
     This specifies where the makefile should look for a threads library
file, and its includes respectively.  You must specify full pathnames.
Verification on what you have entered is minimal (ie. will only verify
the existence of the library file, and the include directory exists).
This should only be used if Magick does not detect a threads library.

<tag/--with-locknode=node
--with-locktype=type
--with-lockrel=rel/
     This will set the host lock values (see --enable-hostlock below)
for the purpose of building a locked binary for another system.  This
is mainly for people who want to run magick on a system that is not
capable of compiling it, but dont want to use an unlocked binary.  The
best way to to do this is after the configuration process, type 'make
ace_uname' and then execute ace_uname, the value on the 2nd line is the
node, the value on the 1st and 5th line are the type and should be
seperated by a `/' character (ie. 1st/5th).  The value of the 3rd line
is the rel.  Alternatively, you can try using the commands `uname -n'
for the 2nd line, `uname -s' for the 1st line, `uname -m' for the 5th
line, and `uname -r' for the 3rd line, but it is recommended you use
ace_uname instead (as the values may not match on some systems!).
NOTE: the release is currently not used in hostlock protection.

<tag/--with-include=path
--with-libdir=path
--with-lib=lib/
     These will add -I, -L and -l options to the compile/link options.
If you find Magick wont compile on your system due to missing symbols,
or undefined references, it may not have been able to find a header it
needed, or it may not have included a required library.  The include
and libdir should both be directories where to find the include files
or libraries, where lib should be the library name with the lib prefix
and the .so or .a postfix truncated.  eg. libpthread.so becomes pthread.

<tag/--enable-static
--disable-static/
     This determines weather the resulting Magick binaries will be
linked statically or dynamically.  Static binaries are larger than
dynamic, but may be taken across differing releases (of the same
operating system) without regard for what specific version of things
such as the C libraries are installed.  Static binaries require that
a static ACE, threads and zlib library exist to link with.  Dynamic
binaries may only be used on systems that have the same library
setup as the one they were compiled on, and because they dont include
all the extra stuff needed to statically link, are much smaller.

<tag/--enable-quick
--disable-quick/
     This turns off the call to 'helper/build-ver' which increments
the build number displayed in Magick's version reply.  This is only
useful if you plan to compile alot, and dont want to have to re-
compile the entire program each time you make a change, however it
means you will not have an accurate build number indication.

<tag/--enable-test
--disable-test/
     This creates testing binaries of Magick.  Test binaries will not
communicate through a socket, but instead will read all input from
standard input, and send all output to standard output.  With this
mode, you can play back certain test scenarios, to try and catch a
specific bug, or just verify the code still works as it should.

<tag/--enable-crypt
--disable-crypt/
     This turns on or off encryption support in Magick.  Some versions
of Magick may not be distributed with encryption, in which case you
will have to download it and enable it to use it.  The encryption of
choice right now is 3BF (3 * blowfish).

<tag/--enable-trace
--disable-trace/
     This turns on or off the internal tracing functions of Magick.  This
can cause problems right now with large databases.  It is therefore by
default disabled.  It does however allow debugging of Magick without
the need or use of core file analysis.

<tag/--enable-convert
--disable-convert/
     This enables or disables the --convert commandline paramater that
can be used to convert older versions of Magick DB's or other services
databases.  Not needed for normal running of magick.

<tag/--enable-getpass
--disable-getpass/
     This enables the ChanServ and NickServ GETPASS commands, as opposed
to the default SETPASS commands.  By doing this, passwords will be stored
as they are in the database.  This is disabled by default, which means
only SETPASS is available, and passwords are stored in a one-way hash
that makes it impossible to retrieve passwords.

<tag/--enable-locks
--disable-locks/
     This turns on or off thread locking.  Thread locking is essential
for ensuring only one thread can access a bit of data at once.  On some
bad thread implementations, this will stop segfaults, however it is a
big target asking for data corruption turning this off.

<tag/--enable-hostlock
--disable-hostlock/
     This will enable or disable host and system type checking on startup.
When enabled, if the binary is moved to a system where the hostname or
system specs are different from where the binary was compiled, it will
fail to operate, and a re-compile will be necessary.  This is enabled by
default, however if you want to create a portable binary (that can be
used anywhere) disable this option.  This is a security feature to protect
against people copying your services directory (binaries and all) and
stealing the databases.  This is not infallable, however it does help.
Disabling this will also disable automatic binary 'stamping' (ie.
putting random keys for keyfile encryption at compile time).  It is
assumed that you are making a binary ment to be portable and/or
distributed, in which case, the binaries should be stamped by the
end-user (or on each system it is deployed).

<tag/--enable-mpatrol
--disable-mpatrol/
     This turns on or off the usage of the memory error checking and
profiling software mpatrol (http://www.cbmamiga.demon.co.uk/mpatrol).
This software is useful in the fact it looks for memory access errors
(eg. accessing unitialised memory, exceeding memory bounds, not freeing
memory, etc).  However it slows the program down dramatically.  Turning
this on causes a new log file (mpatrol.log) to be created.

<tag/--enable-efence
--disable-efence/
     This turns on or off the usage of the memory error checking and
profiling software Electric Fence (http://ftp://ftp.perens.com/pub/ElectricFence).
This software is useful in the fact it looks for memory access errors
(eg. accessing unitialised memory, exceeding memory bounds, not freeing
memory, etc).  However it slows the program down dramatically.  Turning
this on causes the program to stop at the first memory problem (so it
is recommended you run this in a debugger).
</descrip>

`configure' also accepts some other, not widely useful, options.

<sect1>Security Tips
<p>

     Magick has several facilities to ensure your databases and inter-
magick communications are kept secure and encrypted.  The main methods
of facilitating this are:
     <itemize>
     <item>Databases and inter-magick communication is encrypted with a
       key through 3BF.  This key resides in a key file.
     <item>The key file itself is encrypted with two keys generated at
       compile time, to ensure the key file is never clear text.
     <item>EACH compile creates new key file keys, which means you must
       re-generate the key file each time you compile, ensuring it
       does not get stale (and becomes invalid if someone gets it!)
     <item>You may manually replace the key file keys by using the
       magick_stampkeys utility that comes with magick (you will have
       to regenerate your key file after this).
     </itemize>

To ensure the security of your databases and communication, you should
     <itemize>
     <item>Chose a long and complex database key, you must remember this
       somehow, incase you need to generate a new database key, however
       you wont need it often.
     <item>Use the magick_stampkeys utility on all your binaries at once
       and regenerate your keys every so often, so stop them becoming
       stale.
     </itemize>

Windows users will not automatically generate a new keyset with each
compile.  It is recommended you create your own using the magick_stampkeys
utility supplied if you intend to use encryption.  This must be
done some time before the database encryption key is generated.

Syntax for the magick_stampkeys utility is:
<tscreen><verb>
     magick_stampkeys <all binaries to be stamped>
</verb></tscreen>

You MUST do all executable files at once, so an example is:
<tscreen><verb>
     (UNIX) magick_stampkeys magick magick.debug magick_keygen
     (WIN ) magick_stampkeys magick.exe magick_keygen.exe
</verb></tscreen>

Keep in mind that to be able to stamp a binary, it must NOT have been
previously stamped, so you will need a 'freshly linked' file.  All
binary distributions contain un-stamped files, all source distributions
can create (and auto-restamp) files with the "make reilnk" command.

REMEMBER:  If you forget your database password, then you had BETTER
decrypt your databases (via. the config file) ASAP, as if you lose
your key, and do not know the password to generate a new one, you
may as well remove the file and start again.

Pre-compiled binaries will not be able to change the key file keys.
This could be considered an advantage of compiling yourself.

<sect> Usage <p>

<sect1>Support files
<p>

All files and directories listed are relative to the current
'Services Directory'. The services directory is set with the
--dir command line option. If none is specified, it will default
to the current directory.

<descrip>
<tag/magick.ini/ This file is included with your Magick distribution
in the docs directory.  This file must either be specified on the
command line with the --config option, or in the services directory.
This file contains all settings that Magick II will use throughout
its execution (these can be changed and reloaded online).

<tag/magick.mnd/ This is the Magick New Datafile (or mound) file.  This
stores all data that is stored by Magick.  This file is not human
readable, and is often encrypted and/or compressed.  This filename
is a setting in the magick.ini file, and may be changed.  This file
will be created if it does not exist.

<tag/magick.log/ This is the log file which logs all activity of note
that happens inside Magick.  The verbosity of this log file can
vary depending on the --debug option, or the VERBOSE config option.
This file may be zeroed without any decremental effects, or if
it is removed, the OFF and ON online commands will re-establish
the filehandle. This filename is a setting in the magick.ini file,
and may be changed.  This file is created if it doesn't exist.

<tag/magick.pid/ This file indicates the process ID of the currently
running Magick on UNIX-based systems.  This may be used to easily
determine if Magick is running, and to kill a running copy. This
filename is a setting in the magick.ini file, and may be changed.
This file is overwritten on Magick startup.

<tag/magick.motd/ This contains the text of the server motd that will
be displayed to any user who types /MOTD services.server in their
IRC client. This filename is a setting in the magick.ini file, and
may be changed.

<tag/magick.key/ This contains the key for your databases, encrypted.
This key file should be generated with magick_keygen.  This file
may not be used by more than one set of services (unless the binaries
are copied), as each compile requires regenerating this file.  This
filename is a setting in the magick.ini file, and may be changed.

<tag/ircd\*.ini/ These files contain the details that define how each
IRC protocol works.  The IRC protocol (RFC1459) has been expanded
by many different IRCD coding teams, and in many different ways,
and these files help cope with the differences.

<tag/lang/ This directory is where all language files (*.lng, *.lfo and
*.hlp) will be stored.  The path name actually used is a setting
in the magick.ini file.

<tag/lang\*.lng/ These files contain the responses Magick will send back
to users for any command, or output from any procedure.  These files
are 'tokenised', and are substituted with actual values.  The default
language file to used is set by the DEF_LANGUAGE parameter in the
magick.ini file, however languages may be set per-user.

<tag/lang\*.lfo/ These files contain the log file outputs Magick will
use for all messages going to the magick.log file.  These files are
'tokenised', and are substituted with actual values.  The file that
is used is set by the DEF_LANGUAGE parameter in the magick.ini file.

<tag/lang\*.hlp/ These files contain the help text that Magick uses to
respond to all HELP commands.  The default help file used is set by
the DEF_LANGUAGE parameter in the magick.ini file, however languages
may be set per-user.

<tag/files\pic/ This directory is where all user's pictures are stored.
The files themselves are stored as hexadecimal numbers, with no
extension -- the map to real filenames is stored in the database.
The path name actually used is a setting in the magick.ini file.

<tag/files\memo/ This directory is where all attachments are stored.
The files themselves are stored as hexadecimal numbers, with no
extension -- the map to real filenames is stored in the database.
The path name actually used is a setting in the magick.ini file.

<tag/files\public/ This directory is where all files in the public
filesystem are stored.
The files themselves are stored as hexadecimal numbers, with no
extension -- the map to real filenames is stored in the database.
The path name actually used is a setting in the magick.ini file.

<tag/files\temp/ This directory is where all files involved in DCC
transfers (sending or receiving) are stored.  These files are
considered volatile, and if Magick is not running, can safely be
removed. The files themselves are stored as hexadecimal numbers,
with no extension. The path name actually used is a setting in the
magick.ini file.
</descrip>

<sect1> Configuration
<p>

Magick may be configured in one of three ways.  First, you may
manually edit the magick.ini file.  This file is what is read
in by magick to tell it how to operate.  A sample INI file can
be found in the docs directory.  This file contains full text
on what each configuration item does, and what the valid settings
for it are.

The second method requires you to have the Java Runtime Environment
(version 1.4.0 or greater) installed on your machine.  Inside the
gui directory, a jar file called mct.jar is included.  This will
be installed in the same location as the magick binaries upon make
install.  This is the Magick Configuration Tool.  To run it, type:
<tscreen><verb>
    java -jar mct.jar
</verb></tscreen>

This will load up a java applet, which allows you to create a
magick.ini file from within.  Simply go through each of the tabs
and configure the options within.  The advantage of this tool
over hand-editing the INI file is that the Magick Configuration
Tool does syntax validation for you.  However, any magick.ini
file generated with this tool will not have comments in it.

The third method of configuring magick is simply to go to the
URL <htmlurl url="http://www.magick.tm/config">.  If your browser does not have
Java installed, it will prompt you to install it.  This web
page will bring up the Magick Configuration Tool in your browser.
The first thing it will do is prompt to verify the signature on
the applet.  If you do not do this, you will not be able to save
a configuration file directly, but will instead have to generate
it in the applet (in the Current File tab), and cut and paste it
to a file yourself.  Otherwise, the applet performs exactly like
it would if run locally.

<sect1> General Usage
<p>

Magick once started, becomes a background process.  It accepts
a number of command-line options that override the settings of
their equivalents on load.  NOTE: If the config file is loaded
again at runtime, the settings in the config file will be used.

<tscreen><verb>
--help (-h)	Help output (summary of the below).
--version (-v)	Display the Magick version string.
--dir X		Set the initial services directory.
--config X	Set the name (and/or path) of the config file.
--nofork	Do not become a daemon/service process (dont fork()).
--service X     Manipulate Magick's NT Service settings, where X is:
                        insert (insert Magick into service db)
                        start (start Magick, must be a service)
                        stop (stop Magick, must be a service)
                        remove (remove Magick from service db)
		This option is not valid on non-Windows installations.
--convert X	Convert another version of services databases
		to Magick II format, where X is the type of
		database to convert.  Currently recognised:
			magick (1.4)   esper (4.4.8)
			epona (1.4.7)  sirc (N/A)
		MUST BE COMPILED INTO BINARY TO BE AVAILABLE.
--trace X:Y	Set the trace level on startup, equivalent of
		using the OperServ TRACE SET command while
		running, where X is the trace type (or ALL), and
		Y is the trace level in hex.
		MUST BE COMPILED INTO BINARY TO BE AVAILABLE.
</verb></tscreen>

All other command line options just override the configuration
file settings.  Below is a list of the overrides available, and
the settings they override in the configuration file.  Please see
the configuration file's comments for more information on each
option, and what it does.

<tscreen><verb>
PARAMETER	SHORT	GROUP		OPTION
---------	-----	-----		------
--name X	-N	STARTUP		SERVER_NAME
--desc X	-D	STARTUP		SERVER_DESC
--user X	-U	STARTUP		SERVICES_USER
--host X	-H	STARTUP		SERVICES_HOST
--ownuser	-o	STARTUP		OWNUSER=true
--level X	-l	STARTUP		LEVEL
--lagtime X	-g	STARTUP		LAGTIME
--umask X	-u	FILES		UMASK
--verbose	-V	FILES		VERBOSE=true
--log X		-L	FILES		LOGFILE
--logchan X	-C	FILES		LOGCHAN
--dbase X	-d	FILES		DATABASE
--protocol X	-P	FILES		PROTOCOL
--langdir X	-S	FILES		LANGDIR
--encrypt	-E	FILES		ENCRYPTION=true
--decrypt	-e	FILES		ENCRYPTION=false
--keyfile X	-K	FILES		KEYFILE
--compress X	-c	FILES		COMPRESSION
--relink X	-r	CONFIG		SERVER_RELINK
--norelink		CONFIG		SERVER_RELINK=0
--save X	-w	CONFIG		SAVETIME
--cycle X	-t	CONFIG		CYCLETIME
--check X	-T 	CONFIG		CHECKTIME
--ping X	-p	CONFIG		PING_FREQUENCY
--minthreads X	-q	CONFIG		MIN_THREADS
--maxthreads X	-Q	CONFIG		MAX_THREADS
--lwm X		-m	CONFIG		LOW_WATER_MARK
--hwm X		-M	CONFIG		HIGH_WATER_MARK
--append	-a	NICKSERV	APPEND_RENAME=true
--rename	-A	NICKSERV	APPEND_RENAME=false
--ident X	-R	NICKSERV	IDENT
--language X	-s	NICKSERV	DEF_LANGUAGE
--nodcc		-x	NICKSERV	PICEXT=  (nothing)
			MEMOSERV	FILES=0
--inflight X	-f	MEMOSERV	INFLIGHT
--logignore	-i	OPERSERV	LOG_IGNORE=true
--ignore X      -I	OPERSERV	IGNORE_METHOD
</verb></tscreen>

Example:

<tscreen><verb>
./magick --config /etc/magick.ini
</verb></tscreen>

After Magick is running, it should be totally driven through the
on-line clients (NickServ, ChanServ, OperServ, etc).  However,
in certain cases, events happen and these interfaces are either
not available, not responding, too slow, or don't recognise you.
For this eventuality, all UNIX SIGNALS have been trapped, and
some perform extra functions that 'originally' intended.

<tscreen><verb>
SIGNAL	NUMBER	EQUIVALENT	DESCRIPTION
------	------	----------	-----------
SIGHUP	1	OS RELOAD	Re-loads the config file.
SIGINT	2	OS SIGNON	Attempts to sign on all clients.
SIGPIPE	13	IGNORE		Flushes trace output immediately.
SIGTERM	15	OS UPDATE	Saves the databases.
SIGCHLD	17	IGNORE		Check to see if we're alive.
</verb></tscreen>

Some have queried me on why SIGTERM saves the databases.  During
shutdown of many systems, the shutdown scripts will send a SIGTERM
to all running processes, wait a while, then send a SIGKILL (9).
This gives us a chance to save our databases before we're killed.
This also means that you must use kill -KILL (kill -9) to kill
Magick once it has been started.

To use encryption, you must generate a key file with the program
magick_keygen.  This program accepts a maximum of one argument,
being the output key filename.  If no argument is supplied, it
will ask you to enter the filename interactively.

On unix terminals that support it, the text entered at the key
prompts will be hidden, however to not bank on this, and always
ensure no one can look over your shoulder of sniff your network
traffic to find out what the clear-text password is.

Example:

<tscreen><verb>
./magick_keygen

Magick IRC Services - http://www.magick.tm
    (c) 1997-2002 Preston A. Elder <prez@magick.tm>
    (c) 1998-2002 William King <ungod@magick.tm>

Enter filename to output to [magick.key]:
NOTE: A key must be at least 16 bytes long and may be up to 72 bytes long.
Enter database key 1:
Re-Enter database key 1:
Enter database key 2:
Re-Enter database key 2:
Created 362 byte keyfile.
</verb></tscreen>

<sect1>Functionality
<p>

Magick has 6 main services, and offers the ability to script either
added functionality to these existing services, or create totally
new services through its scripting language.  This section gives an
overview of the main functionality and purpose of the hard-coded
services.  Please note, the actual nicknames of each of the below
services may be different on each network.

NickServ is a services that allows users to register their IRC
nicknames so that no one else may take them.  Users may then set
various options on their nickname record, such as privacy mode,
kill protection, etc that affect the way their nickname is
treated, and how services respond to them.  They may also set
purely informational fields in their nickname record they is
displayed on an INFO request.  NickName registration is required
to execute many other commands in services, be added to a channel
access list, or receive memos from other users.

ChanServ is a service that allows users to register a channel on
the IRC network, so that they may specify who has access to them,
and who shall be automatically kicked from them.  This not only
prevents such things as channel takeovers, but establishes a
definite 'seniority' system in the channel.  ChanServ also allows
users to set various options on their channel records, from the
purely informational that is displayed in an INFO request, to
options that change the behaviour of services, and how users are
treated in a channel.  This service also offers such features as
on-join greetings, user-based greetings, etc.

MemoServ is a service that allows users to send memos to other
users, or post news articles to channels.  This service also
allows such features as forwarding, or replying to memos, and
even attaching files via. DCC to memos (to other users only).
This service also integrates with NickServ's ignore list, and
ChanServ's access list to vary the ability to send, or read
memos or news articles.

CommServ is a service that maintains 'committees' or groups of
users.  These groups can be simply a list of users who have a
common interest, or can alter a user's access to certain features
of services.  You may also send memos to all members of a committee
or set logon messages for committees that all members will see
on signon.  Services has 6 'default' committees:
	<descrip>
	<tag/SADMIN/ Services Administrators - Members of this
		  committee are hard-coded into the Magick
		  configuration file.
	<tag/SOP/ Services Operators - Members of this committee
		  are added by members of the SADMIN committee.
	<tag/ADMIN/ Server Administrators - Members of this committee
		  are added by members of the SADMIN committee.
	<tag/OPER/ IRC Operators - Members of this committee are
		  added by members of the ADMIN committee.
	<tag/REGD/ All Registered Users - This committee may not be
		  modified, and its members are dynamic.
	<tag/ALL/ All Users - This committee may not be modified,
		  and its members are dynamic.
	</descrip>

OperServ is a services that allows IRC Operators to keep control
on the network.  This service offers functions like an Automatic
Kill list, Clone Protection (and overriding), Services Ignore,
IRC Operator Denying, as well as the ability to JUPE (fake-link)
a server, change a user or channels modes, and many more functions.

ServMsg is mainly an informational service, users may get help,
statistics and information about services, and the network they
are connected to from this service.  This service also offers the
ability for Server Administrators to send a global message that
will be sent to all users on the network, and services operators
to offer files to users through the public file system.

<sect>Questions and Answers<p>

<sect1>What is the Home Site of Magick?<p>
The Product home site is <htmlurl url="http://www.magick.tm">

The Project home site is <htmlurl url="http://sourceforge.net/projects/magick">

Whats the difference?  The Product site only really deals with telling
people about Magick, and giving them a place to download it.  There is
help on the site, and links, but most of the content is static (not
changing) unless there is a new version.  There IS a news section, but
this is more general news.

The Project site is where all bug tracking is done -- the newest (alpha
and beta) versions of the program are available from here, Forums for
which to discuss magick are hosted here, and a task list of what is to
be done in Magick is also contained on this site.  This site is very
dynamic and where you should go if you have questions, or problems
with magick -- or want to see whats coming up, or who is who.


<sect1>My IRCD isn't supported, what can I do?<p>
   If this is the case, and none of the pre-defined IRCD's are
compatible with it, please find out exactly (at a server to server
protocol level) how your IRCD is different to the ones Magick supports
(or ask the IRCD's author) and email the list of differences to the
Magick Development Team <htmlurl url="mailto:devel@magick.tm" name="devel@magick.tm">.

Here are some of the IRCD's we know are compatible with ones supported:
<tscreen><verb>
IRCD                    COMPATIBLE
------------------------------------------------
Wrecked IRCD            DALNet >= 4.4.15
</verb></tscreen>

<sect1>Why dont these services work right with Hybrid?<p>

Hybrid has several key features missing from what many consider
a 'modern' ircd.  There is no way to remove a network-wide kill
(aka. GLINE), no way to rename a nickname on the network, no
way to set user modes on people, and probably weirdest of all,
users cannot OP themselves.  This means that many features that
people often expect from Magick are disabled.

The most obvious thing many people will notice using Magick on
a hybrid network is that ChanServ, if set to join a channel,
will not OP itself -- mainly because it cant, it tries, but
hybrid rejects it.  Also all users who dont identify will be
killed, not renamed, and options like SETMODE (under CommServ
in the magick.ini file) will have no effect.

Not much I can do about this, hybrid was NOT designed for use
with services, and it shows.  Hybrid, unlike alot of other IRCDs
is a 'paranoid' IRCD.  Most IRCD's out there will basically
say 'If I receive it, unless its syntactically wrong, its already
happened, so I cant reject it -- so I'll just deal with it'.
Hybrid says 'I am going to make sure its not only syntactically
correct, but that it adheres to all the rules I place on it'.

<sect1>I like these services and want to pay the author!<p>
   OK, so this isn't something I hear, but a little wishful thinking
never hurts.  If you want to send me something by snail mail, then
feel free to do so to PO BOX 215, HAWTHORNE, NY, USA, 10594.
I always like tokens of appreciation, puts a smile on my face and
makes the whole thing worth while (no, not necessarily money, but
that is always nice!).  Remember tho, if you ARE going to send me
money, don't send cash, and ensure it is cashable in the United
States (an international postal order is usually best).

<sect>License
<p>

                            The Artistic License
                         Version 2.0beta4, October 2000

                         Copyright (C) 2000, Larry Wall.
        Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.

                                  Preamble

This copyright license states the terms under which a given free software
Package may be copied, modified and/or redistributed, while the
Originator(s) maintain some artistic control over the future
development of that Package (at least as much artistic control as can be
given under copyright law while still making the Package open source and
free software).

This license is bound by copyright law, and thus it legally applies only to
works which the copyright holder has permitted copying, distribution or
modification under the terms of the Artistic License, Version 2.0.

You are reminded that You are always permitted to make arrangements wholly
outside of a given copyright license directly with the copyright
holder(s) of a given Package. If the terms of this license
impede your ability to make full use of the Package, You are encouraged to
contact the copyright holder(s) and seek a different licensing
arrangement.

                                Definitions

`Package' refers to the collection of files distributed by the
Originator(s), and derivatives of that collection of files
created through textual modification.

`Standard Version' refers to the Package if it has not been modified, or
has been modified only in ways suggested by the Originator(s).

`Modified Version' refers to the Package, if it has been changed by You
via textual modification of the source code, and such changes were not
suggested by the Originator(s).

`Originator' refers to the author(s) and/or copyright
holder(s) of the Standard Version of the Package.

`You' and `Your' refers to any person who would like to copy,
distribute, or modify the Package.

`Distribution Fee' is any fee that You charge for providing a copy of
this Package to another party. It does not refer to licensing fees.

`Freely Available' means that:

       (a) no fee is charged for the right to use the item (though a
           Distribution Fee may be charged).

       (b) recipients of the item may redistribute it under the same
           conditions they received it.

       (c) If the item is a binary, object code, bytecode, the complete
           corresponding machine-readable source code is included with the
           item.

         Permission for Use and Modification Without Redistribution

  (1) You are permitted to use the Standard Version and create and use
      Modified Versions for any purpose without restriction, provided that
      you do not redistribute the Modified Version to others outside of your
      company or organization.

           Permissions for Redistribution of the Standard Version

  (2) You may make available verbatim copies of the source code of the
      Standard Version of this Package in any medium without restriction,
      either gratis or for a Distribution Fee, provided that you duplicate
      all of the original copyright notices and associated disclaimers.  At
      Your discretion, such verbatim copies may or may not include compiled
      bytecode, object code or binary versions of the corresponding source
      code in the same medium.

  (3) You may apply any bug fixes, portability changes, and other
      modifications made available from any of the Originator(s).  The
      resulting modified Package will still be considered the Standard
      Version, and may be copied, modified and redistributed under the terms
      of the original license of the Standard Version as if it were the
      Standard Version.

 Permissions for Redistribution of Modified Versions of the Package as Source

  (4) You may modify your copy of the source code of this Package in any way
      and distribute that Modified Version (either gratis or for a
      Distribution Fee, and with or without a corresponding binary, bytecode
      or object code version of the Modified Version) provided that You
      clearly indicate what changes You made to the Package, and provided
      that You do at least ONE of the following:

       (a) make the Modified Version available to the Originator(s) of the
           Standard Version, under the exact license of the Standard
           Version, so that the Originator(s) may include your modifications
           into the Standard Version (at their discretion).

       (b) modify any installation scripts and procedures so that
           installation of the Modified Version will never conflict with an
           installation of the Standard Version, include for each program
           installed by the Modified Version clear documentation describing
           how it differs from the Standard Version, and rename your
           Modified Version so that the name is substantially different from
           the Standard Version.

       (c) permit and encourage anyone who receives a copy of the Modified
           Version permission to make your modifications Freely Available in
           some specific way.                                               

      If Your Modified Version is in turn derived from a Modified Version
      made by a third party, then You are still required to ensure that Your
      Modified Version complies with the requirements of this license.

      Permissions for Redistribution of Non-Source Versions of Package

  (5) You may distribute binary, object code, bytecode or other non-source
      versions of the Standard Version of the Package, provided that you
      include complete instructions on where to get the source code of the
      Standard Version.  Such instructions must be valid at the time of Your
      distribution.  If these instructions, at any time while You are
      carrying our such distribution, become invalid, you must provide new
      instructions on demand or cease further distribution.  If You cease
      distribution within thirty days after You become aware that the
      instructions are invalid, then You do not forfeit any of Your rights
      under this license.

  (6) You may distribute binary, object code, bytecode or other non-source
      versions of a Modified Version provided that You do at least ONE of
      the following:

       (a) include a copy of the corresponding source code for the Modified
           Version under the terms indicated in (4).

       (b) ensure that the installation of Your non-source Modified Version
           does not conflict in any way with an installation of the Standard
           Version, include for each program installed by the Modified
           Version clear documentation describing how it differs from the
           Standard Version, and rename your Modified Version so that the
           name is substantially different from the Standard Version.

       (c) ensure that the Modified Version includes notification of the
           changes made from the Standard Version, and offer to provide
           machine-readable source code (under a license that permits making
           that source code Freely Available) of the Modified Version via
           mail order.

        Permissions for Inclusion of the Package in Aggregate Works
  
  (7) You may aggregate this Package (either the Standard Version or
      Modified Version) with other packages and distribute the resulting
      aggregation provided that You do not charge a licensing fee for the
      Package.  Distribution Fees are permitted, and licensing fees for
      other packages in the aggregation are permitted.  Your permission to
      distribute Standard or Modified Versions of the Package is still
      subject to the other terms set forth in other sections of this
      license.

  (8) In addition to the permissions given elsewhere by this license, You
      are also permitted to link Modified and Standard Versions of this
      Package with other works and distribute the result without
      restriction, provided You have produced binary program(s) that do not
      overtly expose the interfaces of the Package.  This includes
      permission to embed the Package in a larger work of your own without
      exposing a direct interface to the Package.  This also includes
      permission to build stand-alone binary or bytecode versions of your
      scripts that require the Package, but do not otherwise give the casual
      user direct access to the Package itself.

        Items That are Never Considered Part of a Modified Version Package

  (9) Works (including, but not limited to, subroutines and scripts) that
      you have linked or aggregated with the Package that merely extend or
      make use of the Package, but are not intended to cause the Package to
      operate differently from the Standard Version, do not, by themselves,
      cause the Package to be a Modified Version.  In addition, such works
      are not considered parts of the Package itself, and are not bound by
      the terms of the Package's license.

              Acceptance of License and Disclaimer of Warranty

 (10) You are not required to accept this License, since you have not signed
      it.  However, nothing else grants you permission to copy, modify or
      distribute the Standard or Modified Versions of the Package.  These
      actions are prohibited by copyright law if you do not accept this
      License.  Therefore, by copying, modifying or distributing Standard
      and Modified Versions of the Package, you indicate your acceptance of
      the license of the Package.

 (11) Disclaimer of Warranty:

       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
       A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT UNLESS REQUIRED BY
       LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER OR CONTRIBUTOR
       BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
       OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
       OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, PROFITS; OR
       BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
       WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
       OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
       EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<sect>Copyright<p>

(c) 1997-2002 Preston Elder, <htmlurl url="mailto:prez@magick.tm" name="prez@magick.tm">
(c) 1998-2002 William King, <htmlurl url="mailto:ungod@magick.tm" name="ungod@magick.tm">

The above copywright may not be removed under any circumstances,
however it may be added to if any modifications are made to this
file.  All modified code must be clearly documented and labelled.

This code is released under the Artistic License v2.0 or better.
The full text of this license should be contained in a file called
COPYING distributed with this code.  If this file does not exist,
it may be viewed here: <htmlurl url="http://www.magick.tm/m2/license.html">

</article>
