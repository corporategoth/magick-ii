#!/bin/sh
#
#  Magick IRC Services
#
# $Id$
# (c) 1997-2001 Preston Elder <prez@magick.tm>
# (c) 1998-2001 William King <ungod@magick.tm>
#
# The above copywright may not be removed under any
# circumstances, however it may be added to if any
# modifications are made to this file.  All modified
# code must be clearly documented and labelled.
#
# ==========================================================
#
# This is a script suitable for use in a crontab.  It checks to make sure
# your services are running.  If your services arn't found, it'll try to
# start them back up.  This script is based on the Eggdrop crontab script.
#
# You'll need to edit this script for your services.
#
# To check for your services every 10 minutes, put the following line in your
# crontab:
#    0,10,20,30,40,50 * * * *   /home/mydir/serviceschk
# And if you don't want to get email from crontab when it checks you services,
# put the following in your crontab:
#    0,10,20,30,40,50 * * * *   /home/mydir/serviceschk >/dev/null 2>&1
#

# Terminate Check (uncomment to terminate the auto-start).
exit 0

# change this to the directory you run your services from.
servicesdir="/usr/local/lib/services"

# IF ace isnt in your LD_LIBRARY_PATH, location of ACE library
# (you will see an error like 'Cannot find libACE.so' if you
# need this -- this should be the path where libACE.so is).
acelibdir="/usr/local/lib"

# command to start services if they're not running.
startcommand="./magick"

# change this to whatever your PID file is called.
pidfile="magick.pid"

# change this to whatever your database file is called.
dbfile="magick.mnd"

# How old should the dbfile be before we consider the
# 'running' process to be dead (ie. no save has happened!).
# Setting this to '0' stops the save time check.
savetime=0

# Set this to either 0 to suppress a core file, unlimited to
# allow a core file of any size, or the maximum core file size.
coresize=unlimited

########## you probably don't need to change anything below here ##########

cd $servicesdir
if test -r ${pidfile}; then
  # there is a pid file -- is it current?
  servicespid=`cat ${pidfile}`
  if `kill -CHLD $servicespid >/dev/null 2>&1`; then
    if test 0$savetime -gt 0; then
      # it's still going
      if test -n "`find . -name $dbfile -mmin -$savetime 2>/dev/null`"; then
        # backout quietly
        exit 0
      else
        echo "Killing non-responding services ..."
        kill -9 $servicespid
      fi
    else
      # it's still going
      # back out quietly
      exit 0
    fi
  fi
  echo ""
  echo "Stale ${pidfile} file (erasing it)"
  rm -f ${pidfile}
fi
echo ""
echo "Couldn't find the services running.  Starting them ..."
echo ""

# If a new file exists, we died while saving ...
if [ -s $dbfile.new ]; then
  # If an old file exists, the new was finished
  if [ -s $dbfile.old ]; then
    cp $dbfile.old $dbfile
  fi
  rm -f $dbfile.old $dbfile.new
elif [ -s $dbfile.old ]; then
  rm -f $dbfile.old
fi

ulimit -c $coresize 2>/dev/null
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$acelibdir"
touch $dbfile
$startcommand

exit 0
