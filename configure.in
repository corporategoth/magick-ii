dnl  Magick IRC Services
dnl
dnl (c) 1997-2000 Preston Elder <prez@magick.tm>
dnl (c) 1998-2000 William King <ungod@magick.tm>
dnl
dnl The above copywright may not be removed under any
dnl circumstances, however it may be added to if any
dnl modifications are made to this file.  All modified
dnl code must be clearly documented and labelled.

dnl
dnl Standard stuff
dnl ==============

AC_INIT(include/config.h)

AM_INIT_AUTOMAKE(Magick, 2.0)
AM_CONFIG_HEADER(include/config.h)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_REQUIRE_CPP
AC_HEADER_TIME
AC_HEADER_STDC
AC_HEADER_STAT
AC_LANG_CPLUSPLUS

dnl
dnl Required stuff
dnl ==============

dnl These flags are needed because it will cause GCC to
dnl go into an infinate loop unless you use them.

CFLAGS="$CFLAGS -fno-default-inline"
CPPFLAGS="$CPPFLAGS -fno-default-inline"

dnl ====================================================

dnl First we check if we were GIVEN the location of ACE.
dnl If we were (ie. acelib) we need to add -L<directory>
dnl and -l<file> to the LIBS paramater.

AC_ARG_WITH(acelib, [  --with-acelib=file      Location of ACE library file],
	[if test -f ${withval}; then
		libdir="`echo ${withval} | sed -e s,/\`basename ${withval}\`$,,`"
		libfile="`echo \`basename ${withval}\` | sed -e s,^lib,, -e s,\.a$,, -e s,\.so$,,`"
		if test ! "x$libdir" = "x$libfile"; then
			LIBS="$LIBS -L${libdir}"
		fi
		if test ! "x$libfile" = "x"; then
			LIBS="$LIBS -l$libfile"
		fi
		libace=1
		echo "checking for $libfile ... (specified) yes"
	fi])

dnl Same deal with includes, and adding a -I to the
dnl C/CPP flags

AC_ARG_WITH(aceinc, [  --with-aceinc=dir       Location of ACE include files],
	[CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"])

dnl ====================================================

dnl First we check to see if we're going to use BSD
dnl threads, because if we are, we need an special
dnl paramater in $LIBS.

AC_ARG_ENABLE(bsdthread, [  --enable-bsdthread      Use BSD-style pthreads],
	[LIBS="$LIBS -pthread"
	libthread=1])

dnl Second we check if we were GIVEN the location of any.
dnl threads implementation.
dnl If we were (ie. threadlib) we need to add -L<directory>
dnl and -l<file> to the LIBS paramater.

AC_ARG_WITH(threadlib, [  --with-threadlib=file   Location of threads library file],
	[if test -f ${withval}; then
		libdir="`echo ${withval} | sed -e s,/\`basename ${withval}\`$,,`"
		libfile="`echo \`basename ${withval}\` | sed -e s,^lib,, -e s,\.a$,, -e s,\.so$,,`"
		if test ! "x$libdir" = "x$libfile"; then
			LIBS="$LIBS -L${libdir}"
		fi
		if test ! "x$libfile" = "x"; then
			LIBS="$LIBS -l$libfile"
		fi
		libthread=1
		echo "checking for $libfile ... (specified) yes"
	fi])

dnl Same deal with includes, and adding a -I to the
dnl C/CPP flags

AC_ARG_WITH(threadinc, [  --with-threadinc=dir    Location of threads include files],
	[CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"])

dnl ====================================================

dnl First we check if we were GIVEN the location of ZLIB.
dnl If we were (ie. zlib) we need to add -L<directory>
dnl and -l<file> to the LIBS paramater.

AC_ARG_WITH(zlib, [  --with-zlib=file        Location of compression library file],
	[if test -f ${withval}; then
		libdir="`echo ${withval} | sed -e s,/\`basename ${withval}\`$,,`"
		libfile="`echo \`basename ${withval}\` | sed -e s,^lib,, -e s,\.a$,, -e s,\.so$,,`"
		if test ! "x$libdir" = "x$libfile"; then
			LIBS="$LIBS -L${libdir}"
		fi
		if test ! "x$libfile" = "x"; then
			LIBS="$LIBS -l$libfile"
		fi
		libz=1
		echo "checking for $libfile ... (specified) yes"
	fi])

dnl Same deal with includes, and adding a -I to the
dnl C/CPP flags

AC_ARG_WITH(zinc, [  --with-zinc=dir         Location of compression include files],
	[CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"])

dnl ====================================================

dnl OK, ACE wasnt specified.  See if we can find
dnl it in the LD_LIBRARY_PATH, if not, error out.

if test 0$libace -eq 0; then
AC_CHECK_LIB(ACE,	_make_ACE_Naming_Context,
	[LIBS="$LIBS -lACE"
	libace=1])
fi

if test 0$libace -eq 0; then
	echo "
ACE (Advanced Communications Environment) is an essential
part of Magick II, and is therefore required to compile
and run it.  ACE could not be found on your system.  If you
have compiled it, please specify the library location with
the option --with-acelib=<dir>

You may obtain ACE from www.cs.wustl.edu/~schmidt/ACE.html"
	exit 1
fi

dnl ====================================================

dnl OK, a threads lib wasnt specified.  See if we can
dnl find one in the LD_LIBRARY_PATH, if not, error out.

if test 0$libthread -eq 0; then
AC_CHECK_LIB(pthread,	pthread_create,	
	[LIBS="$LIBS -lpthread"
	libthread=1])
if test 0$libthread -eq 0; then
AC_CHECK_LIB(pth,	pthread_create,	
	[LIBS="$LIBS -lpth"
	libthread=1])
fi
fi

if test 0$libthread -eq 0; then
	echo "
Magick II requires a threads library to exist (and work)
before it will run.  You do not have any threads
implementation on your system.  If you have, but it just
could not be found, please specify the library location
with the option --with-threadlib=<dir>

NOTE: BSD threads are internal to libc, and so must pass
      the '-pthread' argument to gcc.  To specify BSD
      threads, use --enable-bsdthread

You may obtain GNU pth from www.gnu.org/software/pth"
	exit 1
fi

dnl ====================================================

dnl OK, ZLIB wasnt specified.  See if we can find
dnl it in the LD_LIBRARY_PATH, if not, error out.

if test 0$libz -eq 0; then
AC_CHECK_LIB(z,		inflate,
	[LIBS="$LIBS -lz"
	libz=1])
if test 0$libz -eq 0; then
AC_CHECK_LIB(gz,	inflate,
	[LIBS="$LIBS -lgz"
	libz=1])
fi
fi

if test 0$libz -eq 0; then
	echo "
The Z compression library (zlib) is required to compile and
run Magick II.  zlib could not be found on your system.  If
you have compiled it, please specify the library location with
the option --with-zlib=<dir>

You may obtain zlib from www.cdrom.com/pub/infozip/zlib"
	exit 1
fi

dnl ====================================================

dnl Static definition for now, will check for it later.

AC_DEFINE(MAGICK_HAS_EXCEPTIONS)
AC_CHECK_HEADER(never_find, [AC_DEFINE(WIN32)])
AC_CHECK_HEADER(never_find, [AC_DEFINE(MAGICK_LOCKS_WORK)])

dnl ====================================================

dnl Now we check to see if they want encryption.
dnl DES is included with Magick, and enabled by
dnl default, but here is where they can disable it.

AC_ARG_ENABLE(des, [  --enable-des            Add DES encryption to Magick (default)
  --disable-des           Remove DES encryption from Magick],
	[case "${enablevel}" in
		yes) des=true;;
		no) des=false;;
		*) AC_MSG_ERROR(bad value ${enablevel} for DES option);;
	 esac], [des=true])
if test "$des" = "true"; then
	AC_DEFINE(HASCRYPT)
fi


AC_CHECK_HEADERS(iostream.h)
AC_CHECK_HEADERS(istream.h)
AC_CHECK_HEADERS(ostream.h)
AC_CHECK_HEADERS(fstream.h)
AC_CHECK_HEADERS(strstream.h)
AC_CHECK_HEADERS(set.h)
AC_CHECK_HEADERS(map.h)
AC_CHECK_HEADERS(queue.h)
AC_CHECK_HEADERS(stack.h)
AC_CHECK_HEADERS(vector.h)
AC_CHECK_HEADERS(list.h)
AC_CHECK_HEADERS(deque.h)
AC_CHECK_HEADERS(algorithm.h)
AC_CHECK_HEADERS(exceptions.h)
dnl Cant check this, conflicts with STD C
dnl AC_CHECK_HEADERS(utility.h)
dnl AC_CHECK_HEADERS(string.h)

AC_CHECK_FUNCS(itoa)
AC_CHECK_FUNCS(ftoa)
AC_CHECK_FUNCS(ltoa)
AC_CHECK_FUNCS(ultoa)
AC_CHECK_FUNCS(atoul)

AC_OUTPUT(Makefile src/Makefile docs/Makefile docs/en/Makefile src/antlr/Makefile src/des/Makefile src/xml/Makefile include/Makefile include/antlr/Makefile include/des/Makefile include/xml/Makefile )
