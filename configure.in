dnl  Magick IRC Services
dnl
dnl (c) 1997-2000 Preston Elder <prez@magick.tm>
dnl (c) 1998-2000 William King <ungod@magick.tm>
dnl
dnl The above copywright may not be removed under any
dnl circumstances, however it may be added to if any
dnl modifications are made to this file.  All modified
dnl code must be clearly documented and labelled.

dnl
dnl Standard stuff
dnl ==============

AC_INIT(include/config.h)

AM_INIT_AUTOMAKE(Magick,2.0)
AM_CONFIG_HEADER(include/config.h)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_REQUIRE_CPP
AC_HEADER_TIME
AC_HEADER_STDC
AC_HEADER_STAT
AC_LANG_CPLUSPLUS

dnl
dnl Required stuff
dnl ==============

dnl These flags are needed because it will cause GCC to
dnl go into an infinate loop unless you use them.

CFLAGS="$CFLAGS -fno-default-inline"
CPPFLAGS="$CPPFLAGS -fno-default-inline"

dnl Now we include SGI's STL
dnl CPPFLAGS="$CPPFLAGS -ftemplate-depth-25 -I\$(top_srcdir)/include/stl"

dnl ====================================================

dnl First we check if we were GIVEN the location of ACE.
dnl If we were (ie. acelib) we need to add -L<directory>
dnl and -l<file> to the LIBS paramater.

AC_ARG_WITH(acelib, [  --with-acelib=file      Location of ACE library file],
	[if test -f ${withval}; then
		libdir="`echo ${withval} | sed -e s,/\`basename ${withval}\`$,,`"
		libfile="`echo \`basename ${withval}\` | sed -e s,^lib,, -e s,\.a$,, -e s,\.so$,,`"
		if test ! "x$libdir" = "x$libfile"; then
			LIBS="$LIBS -L${libdir}"
		fi
		if test ! "x$libfile" = "x"; then
			LIBS="$LIBS -l$libfile"
		fi
		libace=1
		echo "checking for $libfile ... (specified) yes"
	fi])

dnl Same deal with includes, and adding a -I to the
dnl C/CPP flags

AC_ARG_WITH(aceinc, [  --with-aceinc=dir       Location of ACE include files],
	[if test -f ${withval}/ace/OS.h; then
		CFLAGS="$CFLAGS -I${withval}"
		CPPFLAGS="$CPPFLAGS -I${withval}"
		libacehead=1
		echo "checking for ace/OS.h ... (specified) yes"
	fi])

dnl ====================================================

dnl First we check to see if we're going to use BSD
dnl threads, because if we are, we need an special
dnl paramater in $LIBS.

AC_ARG_ENABLE(bsdthread, [  --enable-bsdthread      Use BSD-style (libc_r) pthreads],
	[LIBS="$LIBS -pthread"
	libthread=1])

dnl Second we check if we were GIVEN the location of any.
dnl threads implementation.
dnl If we were (ie. threadlib) we need to add -L<directory>
dnl and -l<file> to the LIBS paramater.

AC_ARG_WITH(threadlib, [  --with-threadlib=file   Location of threads library file],
	[if test -f ${withval}; then
		libdir="`echo ${withval} | sed -e s,/\`basename ${withval}\`$,,`"
		libfile="`echo \`basename ${withval}\` | sed -e s,^lib,, -e s,\.a$,, -e s,\.so$,,`"
		if test ! "x$libdir" = "x$libfile"; then
			LIBS="$LIBS -L${libdir}"
		fi
		if test ! "x$libfile" = "x"; then
			LIBS="$LIBS -l$libfile"
		fi
		libthread=1
		echo "checking for $libfile ... (specified) yes"
	fi])

dnl Same deal with includes, and adding a -I to the
dnl C/CPP flags

AC_ARG_WITH(threadinc, [  --with-threadinc=dir    Location of threads include files],
	[CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"
	libthreadhead=1])

dnl ====================================================

dnl First we check if we were GIVEN the location of ZLIB.
dnl If we were (ie. zlib) we need to add -L<directory>
dnl and -l<file> to the LIBS paramater.

AC_ARG_WITH(zlib, [  --with-zlib=file        Location of compression library file],
	[if test -f ${withval}; then
		libdir="`echo ${withval} | sed -e s,/\`basename ${withval}\`$,,`"
		libfile="`echo \`basename ${withval}\` | sed -e s,^lib,, -e s,\.a$,, -e s,\.so$,,`"
		if test ! "x$libdir" = "x$libfile"; then
			LIBS="$LIBS -L${libdir}"
		fi
		if test ! "x$libfile" = "x"; then
			LIBS="$LIBS -l$libfile"
		fi
		libz=1
		echo "checking for $libfile ... (specified) yes"
	fi])

dnl Same deal with includes, and adding a -I to the
dnl C/CPP flags

AC_ARG_WITH(zinc, [  --with-zinc=dir         Location of compression include files],
	[if test -f ${withval}/zlib.h; then
		CFLAGS="$CFLAGS -I${withval}"
		CPPFLAGS="$CPPFLAGS -I${withval}"
		libzhead=1
		ehco "checking for zlib.h ... (specified) yes"
	fi])

dnl ====================================================

AC_ARG_WITH(libdir, [  --with-libdir=dir       Add in search path for libraries],
	[LIBS="$LIBS -L${withval}"])

AC_ARG_WITH(lib, [  --with-lib=dir          Add in library],
	[LIBS="$LIBS -l${withval}"])

AC_ARG_WITH(include, [  --with-include=dir      Add in search path for includes],
	[CFLAGS="$CFLAGS -I${withval}"
	CPPFLAGS="$CPPFLAGS -I${withval}"])

dnl ====================================================

dnl OK, ACE wasnt specified.  See if we can find
dnl it in the LD_LIBRARY_PATH, if not, error out.

if test 0$libace -eq 0; then
AC_CHECK_LIB(ACE,	_make_ACE_Naming_Context,
	[LIBS="$LIBS -lACE"
	libace=1])
fi

if test 0$libace -eq 0; then
	echo "
ACE (Adaptive Communications Environment) is an essential
part of Magick II, and is therefore required to compile
and run it.  ACE could not be found on your system.  If you
have compiled it, please specify the library location with
the option --with-acelib=<lib>.  You may also have to specify
where the includes are aswell, which you may do with the
--with-aceinc=<dir> paramater (this should point to your
ACE_wrappers directory, NOT ACE_wrappers/ace).

You may obtain ACE from www.cs.wustl.edu/~schmidt/ACE.html"
	exit 1
fi

dnl ====================================================

dnl OK, a threads lib wasnt specified.  See if we can
dnl find one in the LD_LIBRARY_PATH, if not, error out.

if test 0$libthread -eq 0; then
AC_CHECK_LIB(pthread,	pthread_create,	
	[LIBS="$LIBS -lpthread"
	libthread=1])
if test 0$libthread -eq 0; then
AC_CHECK_LIB(pth,	pthread_create,	
	[LIBS="$LIBS -lpth"
	libthread=1])
if test 0$libthread -eq 0; then
AC_CHECK_LIB(thread,	thread_create,	
	[LIBS="$LIBS -lthread"
	libthread=1])
fi
fi
fi

if test 0$libthread -eq 0; then
	echo "
Magick II requires a threads library to exist (and work)
before it will run.  You do not have any threads
implementation on your system.  If you have, but it just
could not be found, please specify the library location
with the option --with-threadlib=<dir>.  You may also
have to specify specify where the includes are aswell,
which you may do with the --with-threadinc=<dir> paramater.

NOTE: BSD threads are internal to libc, and so must pass
      the '-pthread' argument to gcc.  To specify BSD
      threads, use --enable-bsdthread

You may obtain GNU pth from www.gnu.org/software/pth"
	exit 1
fi

dnl ====================================================

dnl OK, ZLIB wasnt specified.  See if we can find
dnl it in the LD_LIBRARY_PATH, if not, error out.

if test 0$libz -eq 0; then
AC_CHECK_LIB(z,		inflate,
	[LIBS="$LIBS -lz"
	libz=1])
if test 0$libz -eq 0; then
AC_CHECK_LIB(gz,	inflate,
	[LIBS="$LIBS -lgz"
	libz=1])
fi
fi


if test 0$libz -eq 0; then
	echo "
The Z compression library (zlib) is required to compile and
run Magick II.  zlib could not be found on your system.  If
you have compiled it, please specify the library location with
the option --with-zlib=<dir>.  You may also need to specify
where the includes are aswell, you may do this with the
--with-zinc=<dir> paramater.

You may obtain zlib from www.cdrom.com/pub/infozip/zlib"
	exit 1
fi

dnl ====================================================

AC_CHECK_HEADER(kenny, , [echo "Oh my god! you killed kenny!"])

dnl ====================================================

dnl Static definition for now, will check for it later.
dnl Checking for the never_find function undefines.

dnl WIN32 is only for windows machines.  If this script is
dnl being run, then you probably shouldnt define this.
AC_CHECK_HEADER(never_find, [AC_DEFINE(WIN32)])
dnl AC_DEFINE(WIN32)

dnl Later on, I will have to figure out hoe to test that
dnl exceptions work, anyone have examples?
dnl AC_CHECK_HEADER(never_find, [AC_DEFINE(MAGICK_HAS_EXCEPTIONS)])
AC_DEFINE(MAGICK_HAS_EXCEPTIONS)

dnl ====================================================

dnl Now we check to see if they want encryption.
dnl DES is included with Magick, and enabled by
dnl default, but here is where they can disable it.

AC_ARG_ENABLE(des, [  --enable-des            Add DES encryption to Magick (default)
  --disable-des           Remove DES encryption from Magick],
	[case "${enableval}" in
		yes) des=true;;
		no) des=false;;
		*) AC_MSG_ERROR(bad value ${enableval} for DES option);;
	 esac], [des=true])
if test "$des" = "true"; then
	AC_DEFINE(HASCRYPT)
fi

AC_ARG_ENABLE(trace, [  --enable-trace          Enable TRACE code (can cause problems)
  --disable-trace         Disable TRACE code (default)],
	[case "${enableval}" in
		yes) trace=true;;
		no) trace=false;;
		*) AC_MSG_ERROR(bad value ${enableval} for TRACE option);;
	 esac], [trace=false])
if test "$trace" = "true"; then
	AC_DEFINE(MAGICK_TRACE_WORKS)
fi

AC_ARG_ENABLE(locks, [  --enable-locks          Enable thread locking (default)
  --disable-locks         Disable thread locking (dangerous!)],
	[case "${enableval}" in
		yes) locks=true;;
		no) locks=false;;
		*) AC_MSG_ERROR(bad value ${enableval} for LOCKS option);;
	 esac], [locks=true])
if test "$locks" = "true"; then
	AC_DEFINE(MAGICK_LOCKS_WORK)
fi


AC_ARG_ENABLE(mpatrol, [  --enable-mpatrol        Enable mpatrol (memory debug)
  --disable-locks         Disable mpatrol (default)],
	[case "${enableval}" in
		yes) mpatrol=true;;
		no) mpatrol=false;;
		*) AC_MSG_ERROR(bad value ${enableval} for MPATROL option);;
	 esac], [mpatrol=false])
if test "$mpatrol" = "true"; then
	AC_DEFINE(MAGICK_USE_MPATROL)
	LIBS="$LIBS -lmpatrolmt -lbfd -liberty"
fi


if test 0$libacehead -eq 0; then
AC_CHECK_HEADER(ace/OS.h, [libacehead=1])
fi

if test 0$libacehead -eq 0; then
	echo "
The ACE library has been found, however you must specify
the location of its header files with the --with-aceinc
paramater (this should point to your ACE_wrappers directory,
NOT ACE_wrappers/ace)."
	exit 1
fi

if test 0$libthreadhead -eq 0; then
AC_CHECK_HEADER(pthread.h, [libthreadhead=1])
if test 0$libthreadhead -eq 0; then
AC_CHECK_HEADER(pthreads.h, [libthreadhead=1])
if test 0$libthreadhead -eq 0; then
AC_CHECK_HEADER(thread.h, [libthreadhead=1])
fi
fi
fi

if test 0$libacehead -eq 0; then
	echo "
A threads library has been found, however you must specify
the location of its header files with the --with-threadinc
paramater."
	exit 1
fi

if test 0$libzhead -eq 0; then
AC_CHECK_HEADER(zlib.h, [libzhead=1])
fi

if test 0$libacehead -eq 0; then
	echo "
The Z library has been found, however you must specify the
location of its header files with the --with-zinc paramater."
	exit 1
fi

dnl Find out which to use for C++ headers ...
AC_CHECK_HEADERS(mpatrol.h)
AC_CHECK_HEADERS(termio.h)
dnl AC_CHECK_HEADERS(wchar.h)
AC_CHECK_HEADERS(iostream.h)
AC_CHECK_HEADERS(istream.h)
AC_CHECK_HEADERS(ostream.h)
AC_CHECK_HEADERS(fstream.h)
AC_CHECK_HEADERS(strstream.h)
AC_CHECK_HEADERS(set.h)
AC_CHECK_HEADERS(map.h)
AC_CHECK_HEADERS(queue.h)
AC_CHECK_HEADERS(stack.h)
AC_CHECK_HEADERS(vector.h)
AC_CHECK_HEADERS(list.h)
AC_CHECK_HEADERS(deque.h)
AC_CHECK_HEADERS(algorithm.h)
AC_CHECK_HEADERS(exceptions.h)
dnl Cant check this, conflicts with STD C
dnl AC_CHECK_HEADERS(utility.h)
dnl AC_CHECK_HEADERS(string.h)

AC_CHECK_FUNCS(itoa)
AC_CHECK_FUNCS(ltoa)
AC_CHECK_FUNCS(ftoa)
AC_CHECK_FUNCS(dtoa)
AC_CHECK_FUNCS(ultoa)
AC_CHECK_FUNCS(uitoa)

AC_ARG_WITH(keylen, [  --with-keylen=size      Maximum size of key (and keyfile)],
	[AC_DEFINE_UNQUOTED(KEYLEN, $withval)],
	[AC_DEFINE_UNQUOTED(KEYLEN, 1024)])

AC_OUTPUT(Makefile src/Makefile docs/Makefile docs/en/Makefile src/des/Makefile src/xml/Makefile include/Makefile include/des/Makefile include/xml/Makefile docs/man/Makefile docs/devel/Makefile lang/Makefile)
